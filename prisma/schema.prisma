// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Location {
  INNER_SOLAR_SYSTEM
  ASTEROID_BELT
  OUTER_SOLAR_SYSTEM
  KUIPER_BELT
  OUTSIDE_SOLAR_SYSTEM
}

model Constellation {
  id              String         @id @default(uuid())
  name            String
  shape           String?
  area            Float?
  abbreviation    String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  stars           Star[]
  meteorShowers   MeteorShower[]
  Galaxy          Galaxy[]
}

model Galaxy {
  id              String         @id @default(uuid())
  name            String
  type            GalaxyType     @default(ELLIPTICAL)
  distance        Float
  size            Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  constellationId String?
  constellation   Constellation? @relation(fields: [constellationId], references: [id])
}

enum GalaxyType {
  SPRIAL
  ELLIPTICAL
  IRREGULAR
  BARRED_SPIRAL
}

model Star {
  id              String         @id @default(uuid())
  name            String
  age             Float
  mass            Float
  diameter        Float
  type            StarType       @default(YELLOW_DWARF)
  distance        Float
  temperature     Float
  luminosity      Float
  hasPlanets      Boolean        @default(false)
  brightness      Float
  constellationId String?
  constellation   Constellation? @relation(fields: [constellationId], references: [id])
  planets         Planet[]
  asteroids       Asteroid[]
  comets          Comet[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum StarType {
  WHITE_DWARF
  YELLOW_DWARF
  RED_DWARF
  BLUE_GIANT
  RED_GIANT
  RED_SUPERGIANT
  NEUTRON_STAR
}

model Planet {
  id            String      @id @default(uuid())
  name          String
  age           Float
  mass          Float
  diameter      Float
  density       Float
  type          PlanetType  @default(TERRESTIAL)
  atmosphere    Boolean     @default(false)
  year          Float
  perigee       Float
  apogee        Float
  tilt          Float?
  hasSatellites Boolean     @default(false)
  minTemp       Float?
  maxTemp       Float?
  gravity       Float?
  day           Float
  brightness    Float
  location      Location    @default(INNER_SOLAR_SYSTEM)
  habitable     Boolean     @default(false)
  starId        String
  star          Star        @relation(fields: [starId], references: [id])
  satellites    Satellite[]
  meteorites    Meteorite[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum PlanetType {
  GAS_GIANT
  TERRESTIAL
  DWARF_PLANET
  EXO_PLANET
}

model Satellite {
  id         String        @id @default(uuid())
  name       String
  age        Float
  mass       Float
  diameter   Float
  density    Float
  type       SatelliteType @default(MOON)
  atmosphere Boolean       @default(false)
  year       Float
  perigee    Float
  apogee     Float
  tilt       Float?
  minTemp    Float?
  maxTemp    Float?
  gravity    Float?
  day        Float
  brightness Float
  location   Location      @default(INNER_SOLAR_SYSTEM)
  habitable  Boolean       @default(false)
  planetId   String
  planet     Planet        @relation(fields: [planetId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum SatelliteType {
  MOON
  SATELLITE
}

model Asteroid {
  id            String         @id @default(uuid())
  name          String
  age           Float
  mass          Float
  diameter      Float
  density       Float
  type          AsteroidType   @default(METALLIC)
  year          Float
  perigee       Float
  apogee        Float
  location      Location       @default(INNER_SOLAR_SYSTEM)
  brightness    Float
  starId        String
  star          Star           @relation(fields: [starId], references: [id])
  meteorShowers MeteorShower[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum AsteroidType {
  CHONDRITE
  STONY
  METALLIC
}

model Meteorite {
  id        String   @id @default(uuid())
  name      String
  age       Float
  foundYear Int
  mass      Float
  diameter  Float
  location  String
  planetId  String
  planet    Planet   @relation(fields: [planetId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comet {
  id            String         @id @default(uuid())
  name          String
  mass          Float
  diameter      Float
  density       Float
  type          CometType      @default(SHORT_PERIOD)
  year          Float
  perigee       Float
  apogee        Float
  brightness    Float
  location      Location       @default(INNER_SOLAR_SYSTEM)
  starId        String
  star          Star           @relation(fields: [starId], references: [id])
  meteorShowers MeteorShower[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum CometType {
  SHORT_PERIOD
  LONG_PERIOD
}

model MeteorShower {
  id              String         @id @default(uuid())
  name            String
  previousYear    Int
  nextYear        Int
  initialDate     DateTime
  finalDate       DateTime
  frequency       Int
  duration        Int
  meteorVelocity  Float?
  meteorsPerHour  Int?
  peakDate        DateTime?
  cometId         String?
  comet           Comet?         @relation(fields: [cometId], references: [id])
  asteroidId      String?
  asteroid        Asteroid?      @relation(fields: [asteroidId], references: [id])
  constellationId String?
  constellation   Constellation? @relation(fields: [constellationId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model User {
  id               String    @id @default(uuid())
  firstName        String
  lastName         String
  emailAddress     String    @unique
  password         String
  loginAttempts    Int       @default(0)
  lastLoginAttempt DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
}


